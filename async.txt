Асинхронность — выполнение программного кода, не блокирующее потоки во время ожидания.
Например: делаем запрос в бд для получения некоторых данных.
У нас есть поток и запрос, который выполняет этот поток. При синхронном выполнении наш поток будет ждать, пока БД не ответит. 
В асинхронном случае наш поток будет выполнять другой запрос, пока БД обрабатывает текущий.

Как создать задачу?
Фреймворк предоставляет множество способов для создания и запуска задач, а также оборачивания старого кода.

Фабрики запущенных задач:
Task.Run(Action/Func)
Task.Factory.StartNew(Action/Func)


Фабрики завершенных задач:
Task.FromResult(Result)
Task.FromCanceled(Result)
Task.FromException(Result)
Task.CompletedTask


Конструктор:
var task = new Task(Action/Func)
task.Start()

Комбинирование задач
Есть ситуации, когда нам нужно ожидать выполнения нескольких задач, для этого мы можем использовать комбинаторы задач.
Task.WaitAll();
Task.WaitAny();
Task.WhenAll();
Task.WhenAny();

async/await
Основная идея этого подхода заключается в написании асинхронного кода как синхронного. Это позволило создать более 
дружелюбный интерфейс для работы с асинхронностью.

Что делает async?

Создаёт машину состояний, которая обрабатывает все продолжения и синхронизации.
Разрешает использовать await.
Позволяет передавать вверх по стеку результат и исключения, используя Task.

Что делает await?

Позволяет не блокирующее ожидать результат.
Запуск продолжения в нужном потоке.
Возвращает результат или исключение.

Заблуждения по поводу await

Запускает операцию асинхронно.
Являться синтаксическим сахаром над Task.ContinueWtih.
Обязательно запускает продолжение в новый поток.
Всегда работает асинхронно.


https://stefaniuk.website/all/async-programming-in-csharp/
